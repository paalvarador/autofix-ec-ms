// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  firstName    String
  lastName     String
  email        String         @unique
  phone        String?
  password     String
  role         Role
  workshops    Workshop[]     @relation("UserWorkshop")
  quotations   Quotation[]
  appointments Appointment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Vehicle      Vehicle[]
  WorkOrder    WorkOrder[]
  Notification Notification[]
}

model Workshop {
  id           String        @id @default(uuid())
  name         String
  address      String
  phone        String?
  email        String        @unique
  owner        User          @relation("UserWorkshop", fields: [ownerId], references: [id])
  ownerId      String
  quotations   Quotation[]
  workOrders   WorkOrder[]
  appointments Appointment[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Part         Part[]
  LaborTask    LaborTask[]
}

model Vehicle {
  id           String      @id @default(uuid())
  brand        String
  model        String
  year         Int
  licensePlate String      @unique
  owner        User        @relation(fields: [ownerId], references: [id])
  ownerId      String
  quotations   Quotation[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Quotation {
  id            String          @id @default(uuid())
  customer      User            @relation(fields: [customerId], references: [id])
  customerId    String
  workshop      Workshop        @relation(fields: [workshopId], references: [id])
  workshopId    String
  vehicle       Vehicle         @relation(fields: [vehicleId], references: [id])
  vehicleId     String
  items         QuotationItem[]
  status        QuotationStatus @default(PENDING)
  total         Float
  estimatedTime Int // In days
  workOrder     WorkOrder?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model QuotationItem {
  id          String     @id @default(uuid())
  quotation   Quotation  @relation(fields: [quotationId], references: [id])
  quotationId String
  description String
  type        ItemType
  price       Float
  partId      String
  part        Part?      @relation(fields: [partId], references: [id])
  laborTaskId String?
  laborTask   LaborTask? @relation(fields: [laborTaskId], references: [id])
  createdAt   DateTime   @default(now())
}

model WorkOrder {
  id          String          @id @default(uuid())
  quotation   Quotation       @relation(fields: [quotationId], references: [id])
  quotationId String          @unique
  workshop    Workshop        @relation(fields: [workshopId], references: [id])
  workshopId  String
  customer    User            @relation(fields: [customerId], references: [id])
  customerId  String
  status      WorkOrderStatus @default(IN_PROGRESS)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Appointment {
  id         String            @id @default(uuid())
  customer   User              @relation(fields: [customerId], references: [id])
  customerId String
  workshop   Workshop          @relation(fields: [workshopId], references: [id])
  workshopId String
  date       DateTime
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}

model Part {
  id            String          @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int             @default(0)
  workshopId    String
  workshop      Workshop        @relation(fields: [workshopId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  QuotationItem QuotationItem[]
}

model LaborTask {
  id             String          @id @default(uuid())
  name           String
  description    String?
  hourlyRate     Float
  estimatedHours Int
  workshopId     String
  workshop       Workshop        @relation(fields: [workshopId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  QuotationItem  QuotationItem[]
}

enum Role {
  CUSTOMER
  WORKSHOP
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum WorkOrderStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum ItemType {
  PART
  LABOR
}

enum NotificationType {
  WHATSAPP
  EMAIL
  SYSTEM
}
