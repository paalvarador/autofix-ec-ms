generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(uuid())
  firstName             String
  lastName              String
  email                 String             @unique
  phone                 String?
  password              String
  role                  UserRole
  workshopId            String?
  resetPasswordToken    String?            @unique
  resetPasswordExpires  DateTime?
  createdAt             DateTime           @default(now())
  createdBy             String             @default("admin")
  updatedAt             DateTime           @updatedAt
  updatedBy             String             @default("admin")
  appointments          Appointment[]
  Notification          Notification[]
  quotations            Quotation[]
  Vehicle               Vehicle[]
  WorkOrder             WorkOrder[]
  workshopsId           String?
  Workshop              Workshop?          @relation(fields: [workshopId], references: [id])
  QuotationRequest      QuotationRequest[]
  refreshTokens         RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isRevoked Boolean  @default(false)
  deviceId  String?  // Para identificar el dispositivo/sesi√≥n
  userAgent String?  // Para tracking de sesiones
  ipAddress String?  // Para seguridad adicional
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Workshop {
  id               String             @id @default(uuid())
  name             String
  address          String
  phone            String?
  email            String             @unique
  userId           String
  createdAt        DateTime           @default(now())
  createdBy        String             @default("admin")
  updatedAt        DateTime           @updatedAt
  updatedBy        String             @default("admin")
  appointments     Appointment[]
  LaborTask        Labor[]
  Part             Part[]
  quotations       Quotation[]
  workOrders       WorkOrder[]
  users            User[]
  QuotationRequest QuotationRequest[]
}

model Vehicle {
  id               String             @id @default(uuid())
  year             Int
  licensePlate     String             @unique
  color            VehicleColor
  ownerId          String
  modelId          String
  createdAt        DateTime           @default(now())
  createdBy        String             @default("admin")
  updatedAt        DateTime           @updatedAt
  updatedBy        String             @default("admin")
  quotations       Quotation[]
  owner            User               @relation(fields: [ownerId], references: [id])
  Model            Model              @relation(fields: [modelId], references: [id])
  QuotationRequest QuotationRequest[]
}

model Brand {
  id        String   @id @default(uuid())
  name      String   @unique
  models    Model[]
  createdAt DateTime @default(now())
  createdBy String   @default("admin")
  updatedAt DateTime @updatedAt
  updatedBy String   @default("admin")
}

model Model {
  id        String    @id @default(uuid())
  name      String
  brandId   String
  createdAt DateTime  @default(now())
  createdBy String    @default("admin")
  updatedAt DateTime  @updatedAt
  updatedBy String    @default("admin")
  brand     Brand     @relation(fields: [brandId], references: [id])
  Vehicle   Vehicle[]
}

model QuotationRequest {
  id          String                 @id @default(uuid())
  description String?
  customerId  String
  vehicleId   String
  workshopId  String?
  status      QuotationRequestStatus
  createdAt   DateTime               @default(now())
  createdBy   String                 @default("admin")
  updatedAt   DateTime               @updatedAt
  updatedBy   String                 @default("admin")
  customer    User                   @relation(fields: [customerId], references: [id])
  vehicle     Vehicle                @relation(fields: [vehicleId], references: [id])
  workshop    Workshop?              @relation(fields: [workshopId], references: [id])
}

model Quotation {
  id            String          @id @default(uuid())
  customerId    String
  workshopId    String
  vehicleId     String
  status        QuotationStatus @default(PENDING)
  total         Float
  estimatedTime Int
  createdAt     DateTime        @default(now())
  createdBy     String          @default("admin")
  updatedAt     DateTime        @updatedAt
  updatedBy     String          @default("admin")
  customer      User            @relation(fields: [customerId], references: [id])
  vehicle       Vehicle         @relation(fields: [vehicleId], references: [id])
  workshop      Workshop        @relation(fields: [workshopId], references: [id])
  items         QuotationItem[]
  workOrder     WorkOrder?
}

model QuotationItem {
  id          String            @id @default(uuid())
  quotationId String
  description String
  type        QuotationItemType
  price       Float
  createdAt   DateTime          @default(now())
  createdBy   String            @default("admin")
  updatedAt   DateTime          @updatedAt
  updatedBy   String            @default("admin")
  laborTaskId String?
  partId      String
  laborTask   Labor?            @relation(fields: [laborTaskId], references: [id])
  part        Part              @relation(fields: [partId], references: [id])
  quotation   Quotation         @relation(fields: [quotationId], references: [id])
}

model WorkOrder {
  id          String          @id @default(uuid())
  quotationId String          @unique
  workshopId  String
  customerId  String
  status      WorkOrderStatus @default(IN_PROGRESS)
  createdAt   DateTime        @default(now())
  createdBy   String          @default("admin")
  updatedAt   DateTime        @updatedAt
  updatedBy   String          @default("admin")
  customer    User            @relation(fields: [customerId], references: [id])
  quotation   Quotation       @relation(fields: [quotationId], references: [id])
  workshop    Workshop        @relation(fields: [workshopId], references: [id])
}

model Appointment {
  id         String            @id @default(uuid())
  customerId String
  workshopId String
  date       DateTime
  status     AppointmentStatus @default(PENDING)
  createdAt  DateTime          @default(now())
  createdBy  String            @default("admin")
  updatedAt  DateTime          @updatedAt
  updatedBy  String            @default("admin")
  customer   User              @relation(fields: [customerId], references: [id])
  workshop   Workshop          @relation(fields: [workshopId], references: [id])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  message   String
  type      NotificationType
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  createdBy String           @default("admin")
  updatedAt DateTime         @updatedAt
  updatedBy String           @default("admin")
  user      User             @relation(fields: [userId], references: [id])
}

model Part {
  id            String          @id @default(uuid())
  name          String
  description   String?
  price         Float
  stock         Int             @default(0)
  workshopId    String
  createdAt     DateTime        @default(now())
  createdBy     String          @default("admin")
  updatedAt     DateTime        @updatedAt
  updatedBy     String          @default("admin")
  workshop      Workshop        @relation(fields: [workshopId], references: [id])
  QuotationItem QuotationItem[]
}

model Labor {
  id             String          @id @default(uuid())
  name           String
  description    String?
  hourlyRate     Float
  estimatedHours Int
  workshopId     String
  createdAt      DateTime        @default(now())
  createdBy      String          @default("admin")
  updatedAt      DateTime        @updatedAt
  updatedBy      String          @default("admin")
  workshop       Workshop        @relation(fields: [workshopId], references: [id])
  QuotationItem  QuotationItem[]
}

enum UserRole {
  CUSTOMER
  WORKSHOP
  ADMIN
}

enum QuotationStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
}

enum QuotationRequestStatus {
  ACTIVE
  CLOSED
  CANCELED
}

enum WorkOrderStatus {
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELED
}

enum QuotationItemType {
  PART
  LABOR
}

enum NotificationType {
  WHATSAPP
  EMAIL
  SYSTEM
}

enum VehicleColor {
  WHITE
  BLACK
  SILVER
  GRAY
  BLUE
  RED
  BROWN
  GREEN
  BEIGE
  YELLOW
  ORANGE
  PURPLE
  GOLD
  OTHER
}
